// <auto-generated />
namespace NuGet.Frameworks
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Strings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("NuGet.Frameworks.Strings", typeof(Strings).GetTypeInfo().Assembly);

        /// <summary>
        /// Frameworks must have the same identifier, profile, and platform.
        /// </summary>
        internal static string FrameworkMismatch
        {
            get { return GetString("FrameworkMismatch"); }
        }

        /// <summary>
        /// Frameworks must have the same identifier, profile, and platform.
        /// </summary>
        internal static string FormatFrameworkMismatch()
        {
            return GetString("FrameworkMismatch");
        }

        /// <summary>
        /// Invalid framework identifier.
        /// </summary>
        internal static string InvalidFrameworkIdentifier
        {
            get { return GetString("InvalidFrameworkIdentifier"); }
        }

        /// <summary>
        /// Invalid framework identifier.
        /// </summary>
        internal static string FormatInvalidFrameworkIdentifier()
        {
            return GetString("InvalidFrameworkIdentifier");
        }

        /// <summary>
        /// Invalid portable frameworks.
        /// </summary>
        internal static string InvalidPortableFrameworks
        {
            get { return GetString("InvalidPortableFrameworks"); }
        }

        /// <summary>
        /// Invalid portable frameworks.
        /// </summary>
        internal static string FormatInvalidPortableFrameworks()
        {
            return GetString("InvalidPortableFrameworks");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
